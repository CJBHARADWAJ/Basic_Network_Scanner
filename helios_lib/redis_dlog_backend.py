import redis
import hashlib
import helios_lib.config as config

r = redis.StrictRedis(host=config.REDIS_HOST, port=config.REDIS_PORT, db=0)


class DLogTable(object):
    """
    Keeping track of discrete logs
    """

    def __init__(self, base, modulus):
        self.dlogs = {}
        self.dlogs[1] = 0
        self.last_dlog_result = 1
        self.counter = 0
        self.base = base
        self.modulus = modulus

    def increment(self):
        self.counter += 1

        # new value
        new_value = (self.last_dlog_result * self.base) % self.modulus
        hash_value = hashlib.md5(str(new_value).encode('utf-8')).digest()

        # record the discrete log
        # self.dlogs[new_value] = self.counter
        ####
        r.set(hash_value, self.counter)
        ####
        # record the last value
        self.last_dlog_result = new_value

    def precompute(self, up_to):
        while self.counter < up_to:
            self.increment()

    def lookup(self, value):
        return self.dlogs.get(value, None)


class RedisDlog(object):
    def __init__(self, table_lenght=int(config.REDIS_TABLE_LENGHT)):
        self.table_lenght = table_lenght
        self.p = 16328632084933010002384055033805457329601614771185955389739167309086214800406465799038583634953752941675645562182498120750264980492381375579367675648771293800310370964745767014243638518442553823973482995267304044326777047662957480269391322789378384619428596446446984694306187644767462460965622580087564339212631775817895958409016676398975671266179637898557687317076177218843233150695157881061257053019133078545928983562221396313169622475509818442661047018436264806901023966236718367204710755935899013750306107738002364137917426595737403871114187750804346564731250609196846638183903982387884578266136503697493474682071
        self.g = 14887492224963187634282421537186040801304008017743492304481737382571933937568724473847106029915040150784031882206090286938661464458896494215273989547889201144857352611058572236578734319505128042602372864570426550855201448111746579871811249114781674309062693442442368697449970648232621880001709535143047913661432883287150003429802392229361583608686643243349727791976247247948618930423866180410558458272606627111270040091203073580238905303994472202930783207472394578498507764703191288249547659899997131166130259700604433891232298182348403175947450284433411265966789131024573629546048637848902243503970966798589660808533

    def compute(self):
        dlog_table = DLogTable(base=self.g, modulus=self.p)
        r.set(hashlib.md5(str(1).encode('utf-8')).digest(), 0)
        dlog_table.precompute(self.table_lenght)
